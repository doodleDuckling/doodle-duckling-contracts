{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xee0C578FE1434864f59Ecc5bD6FB9785b8AD442B",
    "txHash": "0x2f51f6940d59462a40a08e1d13895b5d25b54f32a667be3c302e69791ed47998",
    "deployTransaction": {
      "hash": "0x2f51f6940d59462a40a08e1d13895b5d25b54f32a667be3c302e69791ed47998",
      "type": 0,
      "accessList": null,
      "blockHash": "0xdd63da4cc1e54fda088a24511abcab4cb693ff88176051e93f288ba380709f40",
      "blockNumber": 15473680,
      "transactionIndex": 104,
      "confirmations": 1,
      "from": "0xA80382a25f5129Bc627931dF2e0B8fCCbc1c7e0D",
      "gasPrice": {
        "type": "BigNumber",
        "hex": "0x012a05f200"
      },
      "gasLimit": {
        "type": "BigNumber",
        "hex": "0x075da0"
      },
      "to": null,
      "value": {
        "type": "BigNumber",
        "hex": "0x00"
      },
      "nonce": 1,
      "data": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610759806100616000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead146101645761007b565b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b366004610515565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d1610215565b005b3480156100df57600080fd5b506100d16100ee366004610554565b610292565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f36600461058c565b61031c565b34801561013057600080fd5b506100d161013f366004610554565b6103ad565b34801561015057600080fd5b506100d161015f366004610515565b610405565b34801561017057600080fd5b506100a061017f366004610515565b6104ef565b6000806000836001600160a01b03166040516101aa90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101e5576040519150601f19603f3d011682016040523d82523d6000602084013e6101ea565b606091505b5091509150816101f957600080fd5b8080602001905181019061020d9190610538565b949350505050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f906106c0565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146102bc5760405162461bcd60e51b815260040161023f906106c0565b6040516308f2839760e41b81526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103465760405162461bcd60e51b815260040161023f906106c0565b60405163278f794360e11b81526001600160a01b03841690634f1ef286903490610376908690869060040161065d565b6000604051808303818588803b15801561038f57600080fd5b505af11580156103a3573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146103d75760405162461bcd60e51b815260040161023f906106c0565b604051631b2ce7f360e11b81526001600160a01b038281166004830152831690633659cfe6906024016102e6565b6000546001600160a01b0316331461042f5760405162461bcd60e51b815260040161023f906106c0565b6001600160a01b0381166104945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161023f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000836001600160a01b03166040516101aa906303e1469160e61b815260040190565b600060208284031215610526578081fd5b81356105318161070b565b9392505050565b600060208284031215610549578081fd5b81516105318161070b565b60008060408385031215610566578081fd5b82356105718161070b565b915060208301356105818161070b565b809150509250929050565b6000806000606084860312156105a0578081fd5b83356105ab8161070b565b925060208401356105bb8161070b565b9150604084013567ffffffffffffffff808211156105d7578283fd5b818601915086601f8301126105ea578283fd5b8135818111156105fc576105fc6106f5565b604051601f8201601f19908116603f01168101908382118183101715610624576106246106f5565b8160405282815289602084870101111561063c578586fd5b82602086016020830137856020848301015280955050505050509250925092565b600060018060a01b038416825260206040818401528351806040850152825b818110156106985785810183015185820160600152820161067c565b818111156106a95783606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461072057600080fd5b5056fea2646970667358221220d849f96f3086b9f82cdcf665adb8c697ace05638da1c7c16ab2d26293717af6764736f6c63430008020033",
      "r": "0x275f1d7f80d6eb285aa24ee8b9c4a5ae30a90916b1e5cf3f9ef3fa476e35c0e1",
      "s": "0x152aa4e065d911e00ef541f26192174372b249a6ab8bef2021363a1314eb5807",
      "v": 148,
      "creates": "0xee0C578FE1434864f59Ecc5bD6FB9785b8AD442B",
      "chainId": 56
    }
  },
  "proxies": [
    {
      "address": "0xBD870f3500b52357C5Fac07a92B7eF38c74983d5",
      "txHash": "0xaec4f6a3824181056f714496eaabe03dd2c0c13ff760eba0e4306c3ff5b16914",
      "kind": "transparent"
    }
  ],
  "impls": {
    "3a0594c29b507456430ff21351ee8d06c649ed7b74344f548f7558ba3312a483": {
      "address": "0x46e57F890CE254579d09898c83d4571300D1F60b",
      "txHash": "0x60459a64ccf33e5136d9a9f23da57bc84107d6e0adba551daec479cd6d668676",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:82"
          },
          {
            "contract": "DoodleDucklingStamp",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts\\DoodleDucklingStamp.sol:13"
          },
          {
            "contract": "DoodleDucklingStamp",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts\\DoodleDucklingStamp.sol:15"
          },
          {
            "contract": "DoodleDucklingStamp",
            "label": "_tokenId",
            "type": "t_struct(Counter)1795_storage",
            "src": "contracts\\DoodleDucklingStamp.sol:18"
          },
          {
            "contract": "DoodleDucklingStamp",
            "label": "userList",
            "type": "t_mapping(t_address,t_struct(User)4432_storage)",
            "src": "contracts\\DoodleDucklingStamp.sol:31"
          },
          {
            "contract": "DoodleDucklingStamp",
            "label": "stampList",
            "type": "t_mapping(t_uint256,t_struct(Stamp)4427_storage)",
            "src": "contracts\\DoodleDucklingStamp.sol:32"
          },
          {
            "contract": "DoodleDucklingStamp",
            "label": "stamps",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts\\DoodleDucklingStamp.sol:33"
          },
          {
            "contract": "DoodleDucklingStamp",
            "label": "isStopped",
            "type": "t_bool",
            "src": "contracts\\DoodleDucklingStamp.sol:35"
          },
          {
            "contract": "DoodleDucklingStamp",
            "label": "nonWhitelistIsActive",
            "type": "t_bool",
            "src": "contracts\\DoodleDucklingStamp.sol:36"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_struct(Counter)1795_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(User)4432_storage)": {
            "label": "mapping(address => struct DoodleDucklingStamp.User)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(User)4432_storage": {
            "label": "struct DoodleDucklingStamp.User",
            "members": [
              {
                "label": "lastDrawTime",
                "type": "t_uint256"
              },
              {
                "label": "isWhitelisted",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_struct(Stamp)4427_storage)": {
            "label": "mapping(uint256 => struct DoodleDucklingStamp.Stamp)"
          },
          "t_struct(Stamp)4427_storage": {
            "label": "struct DoodleDucklingStamp.Stamp",
            "members": [
              {
                "label": "totalAmount",
                "type": "t_uint256"
              },
              {
                "label": "remainAmount",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7c4703187c306ad8b05141d586c3624d14f666d9b75b2ebba128e052efbd17b3": {
      "address": "0x64C83bD86A3763EA551731175B8f89e729442509",
      "txHash": "0x0c6a01e77d101035f3ad77076206b7e1949834087891d719e9f19ba410dbefd1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:82"
          },
          {
            "contract": "DoodleDucklingStamp2",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts\\DoodleDucklingStamp2.sol:14"
          },
          {
            "contract": "DoodleDucklingStamp2",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts\\DoodleDucklingStamp2.sol:16"
          },
          {
            "contract": "DoodleDucklingStamp2",
            "label": "_tokenId",
            "type": "t_struct(Counter)1795_storage",
            "src": "contracts\\DoodleDucklingStamp2.sol:19"
          },
          {
            "contract": "DoodleDucklingStamp2",
            "label": "userList",
            "type": "t_mapping(t_address,t_struct(User)5194_storage)",
            "src": "contracts\\DoodleDucklingStamp2.sol:32"
          },
          {
            "contract": "DoodleDucklingStamp2",
            "label": "stampList",
            "type": "t_mapping(t_uint256,t_struct(Stamp)5189_storage)",
            "src": "contracts\\DoodleDucklingStamp2.sol:33"
          },
          {
            "contract": "DoodleDucklingStamp2",
            "label": "stamps",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts\\DoodleDucklingStamp2.sol:34"
          },
          {
            "contract": "DoodleDucklingStamp2",
            "label": "isStopped",
            "type": "t_bool",
            "src": "contracts\\DoodleDucklingStamp2.sol:36"
          },
          {
            "contract": "DoodleDucklingStamp2",
            "label": "nonWhitelistIsActive",
            "type": "t_bool",
            "src": "contracts\\DoodleDucklingStamp2.sol:37"
          },
          {
            "contract": "DoodleDucklingStamp2",
            "label": "commonClaimCardRule",
            "type": "t_struct(CommonClaimCardRule)5222_storage",
            "src": "contracts\\DoodleDucklingStamp2.sol:54"
          },
          {
            "contract": "DoodleDucklingStamp2",
            "label": "specialClaimCardRuleList",
            "type": "t_mapping(t_uint256,t_struct(SpecialClaimCardRule)5231_storage)",
            "src": "contracts\\DoodleDucklingStamp2.sol:55"
          },
          {
            "contract": "DoodleDucklingStamp2",
            "label": "specialClaimCardClaimedList",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "contracts\\DoodleDucklingStamp2.sol:56"
          },
          {
            "contract": "DoodleDucklingStamp2",
            "label": "userClaimTimes",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts\\DoodleDucklingStamp2.sol:58"
          },
          {
            "contract": "DoodleDucklingStamp2",
            "label": "totalCommonClaimed",
            "type": "t_uint256",
            "src": "contracts\\DoodleDucklingStamp2.sol:59"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_struct(Counter)1795_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(User)5194_storage)": {
            "label": "mapping(address => struct DoodleDucklingStamp2.User)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(User)5194_storage": {
            "label": "struct DoodleDucklingStamp2.User",
            "members": [
              {
                "label": "lastDrawTime",
                "type": "t_uint256"
              },
              {
                "label": "isWhitelisted",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_struct(Stamp)5189_storage)": {
            "label": "mapping(uint256 => struct DoodleDucklingStamp2.Stamp)"
          },
          "t_struct(Stamp)5189_storage": {
            "label": "struct DoodleDucklingStamp2.Stamp",
            "members": [
              {
                "label": "totalAmount",
                "type": "t_uint256"
              },
              {
                "label": "remainAmount",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_struct(CommonClaimCardRule)5222_storage": {
            "label": "struct DoodleDucklingStamp2.CommonClaimCardRule",
            "members": [
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              },
              {
                "label": "stampIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "probabilities",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(SpecialClaimCardRule)5231_storage)": {
            "label": "mapping(uint256 => struct DoodleDucklingStamp2.SpecialClaimCardRule)"
          },
          "t_struct(SpecialClaimCardRule)5231_storage": {
            "label": "struct DoodleDucklingStamp2.SpecialClaimCardRule",
            "members": [
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              },
              {
                "label": "stampId",
                "type": "t_uint256"
              },
              {
                "label": "merkleRoot",
                "type": "t_bytes32"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e7964f80cde70abdbd7af0b9cc7053501f8066bd8caed14fef41a6f63f36c817": {
      "address": "0xf6cD251038b888bD4EE52C8604DD3a54b0B0FC45",
      "txHash": "0x81f9e33c1edfc1b3644fcb1e2beba32568eed5747de3a8d62994450a5ecbf07e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:25"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:28"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:31"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC1155\\ERC1155Upgradeable.sol:471"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:82"
          },
          {
            "contract": "DoodleDucklingStamp3",
            "label": "name",
            "type": "t_string_storage",
            "src": "contracts\\DoodleDucklingStamp3.sol:14"
          },
          {
            "contract": "DoodleDucklingStamp3",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "contracts\\DoodleDucklingStamp3.sol:16"
          },
          {
            "contract": "DoodleDucklingStamp3",
            "label": "_tokenId",
            "type": "t_struct(Counter)1795_storage",
            "src": "contracts\\DoodleDucklingStamp3.sol:19"
          },
          {
            "contract": "DoodleDucklingStamp3",
            "label": "userList",
            "type": "t_mapping(t_address,t_struct(User)6006_storage)",
            "src": "contracts\\DoodleDucklingStamp3.sol:32"
          },
          {
            "contract": "DoodleDucklingStamp3",
            "label": "stampList",
            "type": "t_mapping(t_uint256,t_struct(Stamp)6001_storage)",
            "src": "contracts\\DoodleDucklingStamp3.sol:33"
          },
          {
            "contract": "DoodleDucklingStamp3",
            "label": "stamps",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts\\DoodleDucklingStamp3.sol:34"
          },
          {
            "contract": "DoodleDucklingStamp3",
            "label": "isStopped",
            "type": "t_bool",
            "src": "contracts\\DoodleDucklingStamp3.sol:36"
          },
          {
            "contract": "DoodleDucklingStamp3",
            "label": "nonWhitelistIsActive",
            "type": "t_bool",
            "src": "contracts\\DoodleDucklingStamp3.sol:37"
          },
          {
            "contract": "DoodleDucklingStamp3",
            "label": "commonClaimCardRule",
            "type": "t_struct(CommonClaimCardRule)6034_storage",
            "src": "contracts\\DoodleDucklingStamp3.sol:55"
          },
          {
            "contract": "DoodleDucklingStamp3",
            "label": "specialClaimCardRuleList",
            "type": "t_mapping(t_uint256,t_struct(SpecialClaimCardRule)6045_storage)",
            "src": "contracts\\DoodleDucklingStamp3.sol:56"
          },
          {
            "contract": "DoodleDucklingStamp3",
            "label": "specialClaimCardClaimedList",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "contracts\\DoodleDucklingStamp3.sol:57"
          },
          {
            "contract": "DoodleDucklingStamp3",
            "label": "userClaimTimes",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts\\DoodleDucklingStamp3.sol:59"
          },
          {
            "contract": "DoodleDucklingStamp3",
            "label": "totalCommonClaimed",
            "type": "t_uint256",
            "src": "contracts\\DoodleDucklingStamp3.sol:60"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_struct(Counter)1795_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(User)6006_storage)": {
            "label": "mapping(address => struct DoodleDucklingStamp3.User)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(User)6006_storage": {
            "label": "struct DoodleDucklingStamp3.User",
            "members": [
              {
                "label": "lastDrawTime",
                "type": "t_uint256"
              },
              {
                "label": "isWhitelisted",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_struct(Stamp)6001_storage)": {
            "label": "mapping(uint256 => struct DoodleDucklingStamp3.Stamp)"
          },
          "t_struct(Stamp)6001_storage": {
            "label": "struct DoodleDucklingStamp3.Stamp",
            "members": [
              {
                "label": "totalAmount",
                "type": "t_uint256"
              },
              {
                "label": "remainAmount",
                "type": "t_uint256"
              },
              {
                "label": "rarity",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_struct(CommonClaimCardRule)6034_storage": {
            "label": "struct DoodleDucklingStamp3.CommonClaimCardRule",
            "members": [
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              },
              {
                "label": "stampIds",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "probabilities",
                "type": "t_array(t_uint256)dyn_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(SpecialClaimCardRule)6045_storage)": {
            "label": "mapping(uint256 => struct DoodleDucklingStamp3.SpecialClaimCardRule)"
          },
          "t_struct(SpecialClaimCardRule)6045_storage": {
            "label": "struct DoodleDucklingStamp3.SpecialClaimCardRule",
            "members": [
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              },
              {
                "label": "stampId",
                "type": "t_uint256"
              },
              {
                "label": "merkleRoot",
                "type": "t_bytes32"
              },
              {
                "label": "everyoneCanClaim",
                "type": "t_bool"
              }
            ]
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    }
  }
}
